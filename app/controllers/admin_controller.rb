=begin rdoc
=Description
Handles the requests for most administrative tasks.

=Filters
All methods are filtered using the following methods
  super_authenticate # => ensures that the user is a super user or admin
  get_cart # => populates the cart continuation so that the selected patient isn't lost
  hipaa_filter # => Tracks all hipaa data
=end
class AdminController < ApplicationController
  before_filter :super_authenticate
  before_filter :get_cart
  hipaa_filter

  # Shows the job audit trail
  def audit
    @limit = (params[:limit].blank? ? 20 : params[:limit].to_i)
    @offset = (params[:offset].blank? ? 0 : params[:offset].to_i)
    @count = ViewJobStatus.count
    @job_stati = ViewJobStatus.limit(@limit).offset(@offset).order("last_transaction_timestamp DESC")
  end

  # Takes a job transaction id and returns a partial containing information from the job set to the job
  def audit_details
    @job = Job.find(params[:job_id])
    @job_set = JobSet.find(params[:id])
    render({:partial => "admin/audit_details",
      :locals => {:patient => @job_set.patient, :job_set => @job_set, :job => @job}
    })
  end

  # Returns results originally generated by audit but filtered by the specified filter string
  def audit_filter
    @job_stati = ViewJobStatus.filter(params[:filter])
    @job_stati = @job_stati.where("v_job_status.status = ?",params[:status_code].to_i) unless params[:status_code].blank?
    limit = (params[:limit].blank? ? 20 : params[:limit].to_i)
    offset = (params[:offset].blank? ? 0 : params[:offset].to_i)
    count = @job_stati.count
    @results = @job_stati.limit(limit).offset(offset)
    render(:partial => "admin/transaction_list", :locals => {job_stati: @results, offset: offset, limit: limit, count: count})
  end

end
